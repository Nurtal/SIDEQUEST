## Rush for Bene
## Use the data generated by Kaluza
## (from Export Statistics)
## to generate a new clean file
## where each line is a patient,
## each column is a variable.
## Drop "A" and "B" variable name
## during the process.
## Give the patient center (PRECISESADS format)
## for the 2nd column.


def transfogate(input_data_file_name):
	## Kind of a matrix transposition,
	## but a little more tricky

	## get the new header from input file
	header_list = []
	input_data = open(input_data_file_name, "r")
	cmpt = 0
	for line in input_data:
		line = line.replace("\n", "")
		if(cmpt > 0):
			line_in_array = line.split(";")
			index = 0
			for scalar in line_in_array:
				if(index == 6):
					if(scalar not in header_list):
						header_list.append(scalar)
				index += 1
		cmpt += 1
	input_data.close()


	## Get all patients from the file
	patient_list = []
	input_data = open(input_data_file_name, "r")
	cmpt = 0
	for line in input_data:
		line = line.replace("\n", "")
		if(cmpt > 0):
			line_in_array = line.split(";")
			index = 0
			for scalar in line_in_array:
				if(index == 2):
					## parse the informations
					scalar_in_array = scalar.split("_")				
					patient_id = scalar_in_array[2]
					if(patient_id not in patient_list):
						patient_list.append(patient_id)
				index += 1
		cmpt += 1
	input_data.close()


	## Build the structure
	cohorte = {}
	for patient_id in patient_list:
		pop_to_count = {}
		cohorte[patient_id] = pop_to_count
		pop_to_count["center"] = "undef"
		for pop in header_list:
			pop_to_count[pop] = "NA"


	## Fill the structure
	cmpt = 0
	input_data = open(input_data_file_name, "r")
	for line in input_data:
		line = line.replace("\n", "")

		line_in_array = line.split(";")
		patient_id = "undef"
		cell_pop = "undef"
		panel = "undef"
		center = "undef"
		value = "undef"

		if(cmpt > 0):

			index = 0
			for scalar in line_in_array:

				## get patients information
				if(index == 2):
					## parse the informations
					scalar_in_array = scalar.split("_")
					panel = scalar_in_array[1]
					patient_id = scalar_in_array[2]
					center = scalar_in_array[3]

				## get the cell pop type
				elif(index == 6):
					cell_pop = scalar

				## get value for each pop
				elif(index == 9):
					value = scalar

				index += 1

			## build the patient
			cohorte[patient_id][cell_pop] = value
			cohorte[patient_id]["center"] = center

		cmpt +=1

	## close input file
	input_data.close()

	## Write the output file
	output_file_name = input_data_file_name.split(".")
	output_file_name = output_file_name[0]
	output_file_name = output_file_name +"_transformed.csv"
	output_file = open(output_file_name, "w")

	## Write header
	header = "patient ID;center;"
	index = 0
	index_to_header = {}
	for var in header_list:
		if(var != "\"B\"" and var != "\"A\""):
			header += str(var)+";"
			index_to_header[index] = str(var)
			index += 1
	header = header[:-1]
	output_file.write(header+"\n")

	
	## Write patients
	for patient in cohorte.keys():
		patient_information = cohorte[patient]

		line_to_write = str(patient)+";"+str(patient_information["center"])+";"
		
		for index in index_to_header.keys():
			cell_pop_to_give = index_to_header[index]
			for cell_pop in patient_information.keys():
				if(cell_pop == cell_pop_to_give):


					if(cell_pop != "\"B\"" and cell_pop != "\"A\""):
						line_to_write += str(patient_information[cell_pop])+";"


		line_to_write = line_to_write[:-1]
		output_file.write(line_to_write+"\n")

	output_file.close()



#transfogate("StatisticsDRFZpanel5.csv") # exemple of use

"""
## Process all csv file in the current directory
import glob
file_to_process = glob.glob("*.csv")
for stuff in file_to_process:
	transfogate(stuff)
"""